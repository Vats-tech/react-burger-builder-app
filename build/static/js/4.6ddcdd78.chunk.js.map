{"version":3,"sources":["containers/Auth/Auth.js","components/UI/Form/Input/Input.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","password","minLength","isSignUp","checkValidity","rules","isValid","trim","length","maxLength","inputChangeHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errMsg","errorMessage","error","message","style","color","fontFamily","fontSize","authenticatedRedirect","isAuthenticated","to","className","onSubmit","btnType","clicked","React","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.6ddcdd78.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom';\r\nimport './Auth.css';\r\n\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Input from '../../components/UI/Form/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport * as actions from '../../store/actions/index';\r\n\r\nclass Auth extends React.Component{\r\n    state ={\r\n        controls :{\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Email'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            password : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength :8\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            }\r\n        },\r\n        isSignUp:true\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n    checkValidity=(value,rules)=>{\r\n        let isValid =true;\r\n        if(rules.required){\r\n            isValid = value.trim() !== ' ' && isValid;\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.minLength && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n    inputChangeHandler=(event,controlName)=>{\r\n        const updatedControls ={\r\n            ...this.state.controls,\r\n            [controlName]:{\r\n                ...this.state.controls[controlName],\r\n                value:event.target.value,\r\n                valid:this.checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                touched:true\r\n            }\r\n        };\r\n        this.setState({controls:updatedControls});\r\n    };\r\n\r\n\r\n    submitHandler=(event)=>{\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp);\r\n    }\r\n\r\n    switchAuthModeHandler=() =>{\r\n        this.setState(prevState =>{\r\n            return {isSignUp:!prevState.isSignUp};\r\n        })\r\n    }\r\n    render(){\r\n        const formElementsArray=[];\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            });\r\n        }\r\n        let form=formElementsArray.map(formElement =>(\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid ={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event)=>this.inputChangeHandler(event,formElement.id)}/>                                              \r\n                ));\r\n                // {/* <Button btnType =\"Success\" disabled ={!this.state.formIsValid}>Order</Button> */}\r\n                \r\n                if(this.props.loading){\r\n                    form=<Spinner/>\r\n                }\r\n            let errorMessage=null;\r\n            if(this.props.error){\r\n                let errMsg;\r\n                if(this.props.error.message === 'EMAIL_EXISTS'){\r\n                    errMsg='Please Switch To Login';\r\n                } else if(this.props.error.message==='EMAIL_NOT_FOUND'){\r\n                    errMsg='Please Switch To Register'\r\n                }\r\n                errorMessage=<p style={{color:'red',fontFamily:\"monospace\",fontSize:'18px'}}>\r\n                    {this.props.error.message}<br></br>\r\n                    <p style={{color:'Green'}}>{errMsg}</p>\r\n                </p>\r\n            }\r\n\r\n            let authenticatedRedirect  =null;\r\n            if(this.props.isAuthenticated){\r\n                authenticatedRedirect=<Redirect to={this.props.authRedirectPath} />\r\n            }\r\n\r\n        return(\r\n            <div className=\"Auth\">\r\n                {authenticatedRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                  {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>  \r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignUp ? 'LOGIN' :'REGISTER'} </Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mpaStateToProps = state =>{\r\n    return{\r\n        loading:state.auth.loading,\r\n        error:state.auth.error,\r\n        isAuthenticated:state.auth.token !== null,\r\n        buildingBurger :state.burgerBuilder.building,\r\n        authRedirectPath:state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mpaDisparchToProps = dispatch =>{\r\n    return{\r\n        onAuth :(email,password,isSignUp) =>dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath: () =>dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\nexport default connect(mpaStateToProps,mpaDisparchToProps)(Auth);","import React from 'react';\r\nimport './Input.css';\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses=[\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\");\r\n    }\r\n    switch(props.elementType){\r\n        case 'input' :\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed} />;\r\n                break;\r\n        case 'textarea':\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n                break;\r\n        case 'select':\r\n            inputElement=(\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option=>(\r\n                        <option\r\n                            key={option.value}\r\n                            value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n    }\r\n    return(\r\n            <div className=\"Input\">\r\n                <label className=\"Label\">{props.label}</label>\r\n                {inputElement}\r\n            </div>\r\n    );\r\n}\r\nexport default input;"],"sourceRoot":""}