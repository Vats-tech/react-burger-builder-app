{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Form/Input/Input.js"],"names":["checkoutSummary","props","className","style","fontFamily","color","fontSize","Burger","ingredients","Button","btnType","clicked","checkoutCanclled","disabled","continued","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","email","street","ZIP","minLength","maxLength","deliveryMethod","options","displayValue","formIsValid","checkValidity","rules","isValid","trim","length","OrderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangeHandler","inputIdentifier","updatedOrderForm","updatedFormElement","target","InputIdentifiers","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","loading","Spinner","React","Component","connect","burgerBuilder","totalPrice","orders","auth","userID","dispatch","actions","WithErrorHandler","axios","Checkout","checkoutCanclledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","join","onChange","option","label"],"mappings":"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","file":"static/js/3.c747c4ff.chunk.js","sourcesContent":["import React from 'react';\r\nimport './CheckoutSummary.css';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nconst checkoutSummary = (props) =>  {\r\n        return (\r\n            <div className=\"CheckoutSummary\">\r\n                <h1 style ={{fontFamily:\"monospace\" ,color:\"rgb(100,55,42)\",fontSize:\"20px\"}}>We Hope It Taste Well</h1>\r\n                <div>\r\n                    <Burger ingredients={props.ingredients}/>\r\n                </div>\r\n                <Button \r\n                    btnType = \"Danger\"\r\n                    clicked={props.checkoutCanclled}>Cancle</Button>\r\n                <Button \r\n                    btnType = \"Success\"\r\n                    disabled={props.continued}\r\n                    clicked={props.checkoutContinued}>Continue</Button>\r\n            </div>\r\n        )\r\n}\r\nexport default checkoutSummary;\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nimport './ContactData.css'\r\nimport axios from '../../../axios-order';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Input from '../../../components/UI/Form/Input/Input';\r\nimport WithErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nclass ContactData extends React.Component{\r\n    state={\r\n        orderForm :{\r\n            name : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            email : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your Email'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            street : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'Your Street Name'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            ZIP : {\r\n                elementType : 'input',\r\n                elementConfig:{\r\n                    type:'text',\r\n                    placeholder:'ZIP Code'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6,\r\n                    maxLength:6\r\n                },\r\n                valid:false,\r\n                touched:false\r\n            },\r\n            deliveryMethod : {\r\n                elementType : 'select',\r\n                elementConfig:{\r\n                    options:[\r\n                        // {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'fastest',displayValue:'Fastest'},\r\n                        {value:'cheapest',displayValue:'Cheapest'}\r\n                    ]\r\n                },\r\n                value:'fastest',\r\n                validation:{},\r\n                valid:true\r\n            }\r\n        },\r\n        formIsValid:false\r\n    }\r\n\r\n\r\n    checkValidity=(value,rules)=>{\r\n        let isValid =true;\r\n        if(rules.required){\r\n            isValid = value.trim() !== ' ' && isValid;\r\n        }\r\n        if(rules.minLength){\r\n            isValid = value.length >= rules.minLength && isValid;\r\n        }\r\n        if(rules.maxLength){\r\n            isValid = value.length <= rules.minLength && isValid;\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    OrderHandler = (event) =>{\r\n        event.preventDefault();\r\n        // this.setState({loading:true});\r\n        const formData ={};\r\n        for(let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order ={\r\n            ingredients:this.props.ings,\r\n            price : this.props.price,\r\n            orderData:formData,\r\n            userId :this.props.userId\r\n        }\r\n        this.props.onOrderBurger(order,this.props.token);\r\n        // axios.post('/orders.json',order)\r\n        // .then(response => {\r\n        //     console.log(response);\r\n        //     this.setState({loading: false});\r\n        //     this.props.history.push('/');\r\n        // })\r\n        // .catch(error => {\r\n        //     this.setState({loading: false});\r\n\r\n        // });\r\n    }\r\n\r\n\r\n    inputChangeHandler =(event,inputIdentifier)=>{\r\n        const updatedOrderForm={\r\n            ...this.state.orderForm\r\n        };\r\n        const updatedFormElement = {\r\n            ...updatedOrderForm[inputIdentifier]\r\n        };\r\n        updatedFormElement.value=event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value,updatedFormElement.validation);\r\n        updatedFormElement.touched=true;\r\n        updatedOrderForm[inputIdentifier]=updatedFormElement;\r\n        let formIsValid=true;\r\n        for(let InputIdentifiers in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[InputIdentifiers].valid && formIsValid;\r\n        }\r\n        // console.log(updatedFormElement);\r\n        this.setState({orderForm:updatedOrderForm,formIsValid:formIsValid});\r\n    }\r\n\r\n\r\n    render(){\r\n        const formElementsArray=[];\r\n        for(let key in this.state.orderForm){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form=(\r\n            <form onSubmit={this.OrderHandler}>\r\n                {formElementsArray.map(formElement =>(\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid ={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event)=>this.inputChangeHandler(event,formElement.id)}/>                                              \r\n                ))}\r\n                <Button btnType =\"Success\" disabled ={!this.state.formIsValid}>Order</Button>\r\n            </form>\r\n        );\r\n\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        }\r\n\r\n        return(\r\n            <div className=\"ContactData\">\r\n                <h4>Enter Your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings: state.burgerBuilder.ingredients,\r\n        price : state.burgerBuilder.totalPrice,\r\n        loading:state.orders.loading,\r\n        token:state.auth.token,\r\n        userId: state.auth.userID\r\n    };\r\n}\r\nconst mpaDisparchToProps = dispatch =>{\r\n    return{\r\n        onOrderBurger :(orderData,token) => dispatch(actions.purchaseBurger(orderData,token))\r\n    }\r\n    \r\n}\r\nexport default connect(mapStateToProps,mpaDisparchToProps)(WithErrorHandler(ContactData,axios));","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n// import * as actions from '../../store/actions/index';\r\n\r\nclass Checkout extends React.Component{\r\n    \r\n    state={\r\n        continued:false\r\n    }\r\n    // constructor(props){\r\n    //     super(props);\r\n        \r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients={};\r\n    //     let price =0;\r\n    //     for(let params of query.entries()){\r\n    //         if(params[0] === 'price'){\r\n    //             price = params[1];\r\n    //         }else{\r\n    //             ingredients[params[0]]= + params[1];\r\n    //         }\r\n    //     }\r\n    //     this.state={\r\n    //         ingredients:ingredients,\r\n    //         totalPrice:price\r\n    //     }\r\n    // }\r\n\r\n    /* If you want to remove componetWillMout as it has been removed by react then use above constructer method */\r\n\r\n    // state={\r\n    //     ingredients:null,\r\n    //     totalPrice:0\r\n    // }\r\n    // componentWillMount(){\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients={};\r\n    //     let price =0;\r\n    //     for(let params of query.entries()){\r\n    //         if(params[0] === 'price'){\r\n    //             price = params[1];\r\n    //         }else{\r\n    //             ingredients[params[0]]= + params[1];\r\n    //         }\r\n    //     }\r\n    //     this.setState({ingredients:ingredients, totalPrice:price});\r\n    // }\r\n\r\n   \r\n    checkoutCanclledHandler=()=>{\r\n        this.props.history.goBack();\r\n    }\r\n    checkoutContinuedHandler=()=>{\r\n        this.props.history.replace('./checkout/contact-data');\r\n        this.setState({continued:true});\r\n    }\r\n    render(){\r\n        let summary = <Redirect to=\"/\"/>;\r\n        let purchasedRedirect=null;\r\n        if(this.props.ings){\r\n            purchasedRedirect =this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n        }\r\n        if(this.props.ings){\r\n            summary = (\r\n            <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary \r\n                    checkoutCanclled={this.checkoutCanclledHandler}\r\n                    checkoutContinued={this.checkoutContinuedHandler}\r\n                    continued={this.state.continued}\r\n                    ingredients={this.props.ings} />\r\n                <Route \r\n                    path={this.props.match.path + '/contact-data'}\r\n                    component={ContactData}/>\r\n            </div>\r\n            );\r\n        };\r\n        return summary;\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        ings : state.burgerBuilder.ingredients,\r\n        price : state.burgerBuilder.totalPrice,\r\n        purchased: state.orders.purchased\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport './Input.css';\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses=[\"InputElement\"];\r\n    if(props.invalid && props.shouldValidate && props.touched){\r\n        inputClasses.push(\"Invalid\");\r\n    }\r\n    switch(props.elementType){\r\n        case 'input' :\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed} />;\r\n                break;\r\n        case 'textarea':\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed}/>;\r\n                break;\r\n        case 'select':\r\n            inputElement=(\r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={props.value}\r\n                    onChange={props.changed}>\r\n                    {props.elementConfig.options.map(option=>(\r\n                        <option\r\n                            key={option.value}\r\n                            value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>\r\n                    ))}\r\n                </select>);\r\n            break;\r\n        default:\r\n            inputElement=<input \r\n                className={inputClasses.join(' ')}  \r\n                {...props.elementConfig} value={props.value}\r\n                onChange={props.changed} />;\r\n            break;\r\n    }\r\n    return(\r\n            <div className=\"Input\">\r\n                <label className=\"Label\">{props.label}</label>\r\n                {inputElement}\r\n            </div>\r\n    );\r\n}\r\nexport default input;"],"sourceRoot":""}