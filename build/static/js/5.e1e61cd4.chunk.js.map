{"version":3,"sources":["components/Order/Order.js","containers/Orders/Orders.js"],"names":["order","props","ingredients","ingredientName","push","name","amount","ingredientsOutput","map","ig","style","textTransform","display","margin","border","borderRadius","padding","backgroundColor","className","fontFamily","fontSize","price","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","React","Component","connect","state","auth","userID","dispatch","actions","withErrorHandler","axios"],"mappings":"wNA6BeA,G,OA3BD,SAACC,GACX,IAAMC,EAAY,GAClB,IAAI,IAAIC,KAAkBF,EAAMC,YAC5BA,EAAYE,KAAK,CACbC,KAAKF,EACLG,OAAOL,EAAMC,YAAYC,KAGjC,IAAMI,EAAoBL,EAAYM,KAAI,SAAAC,GACtC,OAAO,uBAEPC,MAAO,CAACC,cAAc,aACtBC,QAAQ,eACRC,OAAO,QACPC,OAAO,iBACPC,aAAa,MACbC,QAAQ,MAERC,gBAAgB,sBATT,UASiCR,EAAGJ,KATpC,KAS4CI,EAAGH,OAT/C,MACAG,EAAGJ,SAUd,OACI,sBAAKa,UAAU,QAAf,UACI,oBAAGR,MAAO,CAACS,WAAW,YAAaC,SAAS,QAA5C,2BAAoEb,KACpE,oBAAGG,MAAO,CAACS,WAAW,YAAaC,SAAS,QAA5C,oBAA4D,uCAAUnB,EAAMoB,iB,gCCflFC,E,kLAoBEC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAMF,KAAKtB,MAAMyB,U,+BAGrD,IAAIC,EAAQ,cAACC,EAAA,EAAD,IAUZ,OATKL,KAAKtB,MAAM4B,UACZF,EACIJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAAAR,GAAK,OACvB,cAAC,EAAD,CAEAE,YAAaF,EAAME,YACnBmB,OAAQrB,EAAMqB,OAFTrB,EAAM8B,QAMnB,8BACKH,Q,GAnCII,IAAMC,WAsDZC,uBAbS,SAAAC,GACpB,MAAO,CACHP,OAAOO,EAAMP,OAAOA,OACpBE,QAAQK,EAAMP,OAAOE,QACrBJ,MAAMS,EAAMC,KAAKV,MACjBC,OAAOQ,EAAMC,KAAKC,WAGD,SAAAC,GACrB,MAAM,CACFb,cAAgB,SAACC,EAAMC,GAAP,OAAkBW,EAASC,IAAoBb,EAAMC,QAG9DO,CAA4CM,YAAiBjB,EAAOkB","file":"static/js/5.e1e61cd4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Order.css';\r\nconst order = (props) =>{\r\n    const ingredients=[];\r\n    for(let ingredientName in props.ingredients){\r\n        ingredients.push({\r\n            name:ingredientName,\r\n            amount:props.ingredients[ingredientName]\r\n        });\r\n    }\r\n    const ingredientsOutput = ingredients.map(ig=>{\r\n        return <span\r\n        key = {ig.name}\r\n        style={{textTransform:\"capitalize\",\r\n        display:\"inline-block\",\r\n        margin:\"0 8px\",\r\n        border:'1px solid #ccc',\r\n        borderRadius:'5px',\r\n        padding:'5px',\r\n        // fontFamily:\"monospace\",\r\n        backgroundColor:'rgb(245, 253, 252)'}}>{ig.name} ({ig.amount})</span>\r\n    })\r\n    return (\r\n        <div className=\"Order\">\r\n            <p style={{fontFamily:\"monospace\" ,fontSize:\"15px\"}}>Ingredients : {ingredientsOutput}</p>\r\n            <p style={{fontFamily:\"monospace\" ,fontSize:\"15px\"}}>Price :<strong> {props.price}</strong></p>\r\n        </div>\r\n    )\r\n};\r\nexport default order;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport Order from '../../components/Order/Order';\r\nimport axios from '../../axios-order';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\n\r\n\r\nclass Orders extends React.Component{\r\n    // state={\r\n    //     orders:[],\r\n    //     loading :true\r\n    // }\r\n    componentDidMount(){\r\n        // axios.get('/orders.json')\r\n        // .then(res=>{\r\n        //     const fetchOrders=[];\r\n        //     for(let key in res.data){\r\n        //         fetchOrders.push({\r\n        //             ...res.data[key],\r\n        //             id:key\r\n        //         });\r\n        //     }\r\n        //     this.setState({orders:fetchOrders,loading:false});\r\n        // })\r\n        // .catch(err=>{\r\n        //     this.setState({loading:false});\r\n        // })\r\n        this.props.onFetchOrders(this.props.token,this.props.userId);\r\n    }\r\n    render(){\r\n        let orders =<Spinner />\r\n        if( !this.props.loading){\r\n            orders =\r\n                this.props.orders.map(order=>(\r\n                    <Order  \r\n                    key={order.id}\r\n                    ingredients={order.ingredients}\r\n                    price={+order.price}/>\r\n                ))\r\n        };\r\n        return(\r\n            <div>\r\n                {orders}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        orders:state.orders.orders,\r\n        loading:state.orders.loading,\r\n        token:state.auth.token,\r\n        userId:state.auth.userID\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch =>{\r\n    return{\r\n        onFetchOrders : (token,userId) => dispatch(actions.fetchOrders(token,userId))\r\n    }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(withErrorHandler(Orders,axios));"],"sourceRoot":""}